# Generated by Django 2.0.9 on 2019-03-07 23:49

import cozmo.storages
import cozmo_common.db.fields
import datetime
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import listings.fields
import listings.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdditionalFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(default='', max_length=200)),
                ('value', models.DecimalField(decimal_places=2, max_digits=8)),
                ('fee_tax_type', models.CharField(choices=[('TLC', 'Local Tax'), ('TTR', 'Tourist Tax'), ('TVA', 'VAT'), ('THO', 'Hotel Tax'), ('TOT', 'Other Tax'), ('FEL', 'Electricity Fee'), ('FTW', 'Towel Fee'), ('FDP', 'Damage Protection Insurance Fee'), ('FBO', 'Booking Fee'), ('FSE', 'Service Fee'), ('FRE', 'Resort Fee'), ('FCO', 'Community Fee'), ('FLE', 'Linen Fee'), ('PFM', 'Platform Fee'), ('CLN', 'Cleaning Fee'), ('FOT', 'Other Fee')], default='FOT', max_length=3)),
                ('is_percentage', models.BooleanField(default=False)),
                ('optional', models.BooleanField(default=False)),
                ('taxable', models.BooleanField(default=False)),
                ('refundable', models.BooleanField(default=False)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('calculation_method', models.CharField(blank=True, choices=[('DA', 'Daily'), ('PS', 'Per Stay'), ('PD', 'Per Person Per Day'), ('3P', 'Per Person Per Stay'), ('PP', 'Per Stay Percent'), ('OR', 'Per Stay Only Rates Percent'), ('NT', 'Per Stay No Taxes Percent')], default='PS', max_length=2)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ArrivalInstruction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('landlord', models.CharField(blank=True, max_length=50)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', cozmo_common.db.fields.PhoneField(blank=True, max_length=16)),
                ('description', models.TextField(blank=True)),
                ('contact_days_before_arrival', models.IntegerField(blank=True, null=True)),
                ('pick_up_description', models.CharField(blank=True, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('min_stay', models.PositiveSmallIntegerField(default=1)),
                ('max_stay', models.PositiveSmallIntegerField(default=None, null=True)),
                ('preparation', models.PositiveSmallIntegerField(default=None, null=True)),
                ('advance_notice', models.PositiveSmallIntegerField(default=None, null=True)),
                ('check_in_days', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')]), blank=True, default=list, size=None)),
                ('check_out_days', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')]), blank=True, default=list, size=None)),
                ('days_min_nights', django.contrib.postgres.fields.hstore.HStoreField(default={})),
                ('min_age', models.PositiveSmallIntegerField(default=None, null=True)),
                ('booking_window_months', models.PositiveSmallIntegerField(default=6)),
                ('time_frame', django.contrib.postgres.fields.ranges.DateRangeField(default=(None, None), null=True)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='AvailabilitySettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('min_stay', models.PositiveSmallIntegerField(default=1)),
                ('max_stay', models.PositiveSmallIntegerField(default=None, null=True)),
                ('preparation', models.PositiveSmallIntegerField(default=None, null=True)),
                ('advance_notice', models.PositiveSmallIntegerField(default=None, null=True)),
                ('check_in_days', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')]), blank=True, default=list, size=None)),
                ('check_out_days', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')]), blank=True, default=list, size=None)),
                ('days_min_nights', django.contrib.postgres.fields.hstore.HStoreField(default={})),
                ('min_age', models.PositiveSmallIntegerField(default=None, null=True)),
                ('booking_window_months', models.PositiveSmallIntegerField(default=6)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BasicAmenities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('laundry', models.BooleanField(default=False)),
                ('internet', models.BooleanField(default=False)),
                ('parking', models.BooleanField(default=False)),
                ('car_rental', models.BooleanField(default=False)),
                ('free_breakfast', models.BooleanField(default=False)),
                ('room_service', models.BooleanField(default=False)),
                ('cooling', models.BooleanField(default=False)),
                ('hot_tub', models.BooleanField(default=False)),
                ('airport_shuttle', models.BooleanField(default=False)),
                ('wheelchair', models.BooleanField(default=False)),
                ('essentials', models.BooleanField(default=False)),
                ('kitchen', models.BooleanField(default=False)),
                ('ac', models.BooleanField(default=False)),
                ('heating', models.BooleanField(default=False)),
                ('hair_dryer', models.BooleanField(default=False)),
                ('hangers', models.BooleanField(default=False)),
                ('iron', models.BooleanField(default=False)),
                ('washer', models.BooleanField(default=False)),
                ('dryer', models.BooleanField(default=False)),
                ('hot_water', models.BooleanField(default=False)),
                ('tv', models.BooleanField(default=False)),
                ('cable', models.BooleanField(default=False)),
                ('fireplace', models.BooleanField(default=False)),
                ('private_entrance', models.BooleanField(default=False)),
                ('private_living_room', models.BooleanField(default=False)),
                ('lock_on_bedroom_door', models.BooleanField(default=False)),
                ('shampoo', models.BooleanField(default=False)),
                ('bed_linens', models.BooleanField(default=False)),
                ('extra_pillows_and_blankets', models.BooleanField(default=False)),
                ('wireless_internet', models.BooleanField(default=False)),
                ('ethernet_connection', models.BooleanField(default=False)),
                ('pocket_wifi', models.BooleanField(default=False)),
                ('laptop_friendly', models.BooleanField(default=False)),
                ('microwave', models.BooleanField(default=False)),
                ('coffee_maker', models.BooleanField(default=False)),
                ('refrigerator', models.BooleanField(default=False)),
                ('dishwasher', models.BooleanField(default=False)),
                ('dishes_and_silverware', models.BooleanField(default=False)),
                ('cooking_basics', models.BooleanField(default=False)),
                ('oven', models.BooleanField(default=False)),
                ('stove', models.BooleanField(default=False)),
                ('free_parking', models.BooleanField(default=False)),
                ('street_parking', models.BooleanField(default=False)),
                ('paid_parking', models.BooleanField(default=False)),
                ('paid_parking_on_premises', models.BooleanField(default=False)),
                ('ev_charger', models.BooleanField(default=False)),
                ('gym', models.BooleanField(default=False)),
                ('pool', models.BooleanField(default=False)),
                ('jacuzzi', models.BooleanField(default=False)),
                ('single_level_home', models.BooleanField(default=False)),
                ('bbq_area', models.BooleanField(default=False)),
                ('patio_or_balcony', models.BooleanField(default=False)),
                ('garden_or_backyard', models.BooleanField(default=False)),
                ('breakfast', models.BooleanField(default=False)),
                ('beach_essentials', models.BooleanField(default=False)),
                ('luggage_dropoff_allowed', models.BooleanField(default=False)),
                ('long_term_stays_allowed', models.BooleanField(default=False)),
                ('cleaning_before_checkout', models.BooleanField(default=False)),
                ('fire_extinguisher', models.BooleanField(default=False)),
                ('carbon_monoxide_detector', models.BooleanField(default=False)),
                ('smoke_detector', models.BooleanField(default=False)),
                ('first_aid_kit', models.BooleanField(default=False)),
                ('beachfront', models.BooleanField(default=False)),
                ('lake_access', models.BooleanField(default=False)),
                ('ski_in_ski_out', models.BooleanField(default=False)),
                ('waterfront', models.BooleanField(default=False)),
                ('baby_bath', models.BooleanField(default=False)),
                ('baby_monitor', models.BooleanField(default=False)),
                ('babysitter_recommendations', models.BooleanField(default=False)),
                ('bathtub', models.BooleanField(default=False)),
                ('changing_table', models.BooleanField(default=False)),
                ('childrens_books_and_toys', models.BooleanField(default=False)),
                ('childrens_dinnerware', models.BooleanField(default=False)),
                ('crib', models.BooleanField(default=False)),
                ('fireplace_guards', models.BooleanField(default=False)),
                ('game_console', models.BooleanField(default=False)),
                ('high_chair', models.BooleanField(default=False)),
                ('outlet_covers', models.BooleanField(default=False)),
                ('pack_n_play_travel_crib', models.BooleanField(default=False)),
                ('room_darkening_shades', models.BooleanField(default=False)),
                ('stair_gates', models.BooleanField(default=False)),
                ('table_corner_guards', models.BooleanField(default=False)),
                ('window_guards', models.BooleanField(default=False)),
                ('wide_hallway_clearance', models.BooleanField(default=False)),
                ('home_step_free_access', models.BooleanField(default=False)),
                ('elevator', models.BooleanField(default=False)),
                ('path_to_entrance_lit_at_night', models.BooleanField(default=False)),
                ('home_wide_doorway', models.BooleanField(default=False)),
                ('flat_smooth_pathway_to_front_door', models.BooleanField(default=False)),
                ('disabled_parking_spot', models.BooleanField(default=False)),
                ('bedroom_step_free_access', models.BooleanField(default=False)),
                ('wide_clearance_to_bed', models.BooleanField(default=False)),
                ('bedroom_wide_doorway', models.BooleanField(default=False)),
                ('accessible_height_bed', models.BooleanField(default=False)),
                ('electric_profiling_bed', models.BooleanField(default=False)),
                ('bathroom_step_free_access', models.BooleanField(default=False)),
                ('grab_rails_in_shower', models.BooleanField(default=False)),
                ('grab_rails_in_toilet', models.BooleanField(default=False)),
                ('accessible_height_toilet', models.BooleanField(default=False)),
                ('rollin_shower', models.BooleanField(default=False)),
                ('shower_chair', models.BooleanField(default=False)),
                ('bathroom_wide_doorway', models.BooleanField(default=False)),
                ('tub_with_shower_bench', models.BooleanField(default=False)),
                ('wide_clearance_to_shower_and_toilet', models.BooleanField(default=False)),
                ('handheld_shower_head', models.BooleanField(default=False)),
                ('common_space_step_free_access', models.BooleanField(default=False)),
                ('common_space_wide_doorway', models.BooleanField(default=False)),
                ('mobile_hoist', models.BooleanField(default=False)),
                ('pool_hoist', models.BooleanField(default=False)),
                ('ceiling_hoist', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Blocking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('time_frame', django.contrib.postgres.fields.ranges.DateRangeField()),
                ('summary', models.TextField(blank=True, default='', max_length=1000)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='BookingSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('months_advanced_bookable', models.IntegerField(blank=True, default=6, null=True)),
                ('cancellation_policy', models.CharField(blank=True, choices=[('EA', 'Full'), ('OK', 'Relaxed'), ('FA', 'Flexible'), ('RI', 'Moderate'), ('FI', 'Firm'), ('ST', 'Strict'), ('SS', 'Super Strict'), ('LT', 'Long Term'), ('NR', 'No Refunds'), ('UN', 'Unknown')], default='UN', max_length=2)),
                ('instant_booking_allowed', models.BooleanField(default=False)),
                ('instant_booking_welcome', models.TextField(blank=True, default='')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='CheckInOut',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_from', listings.fields.HourField(blank=True, default='', max_length=5)),
                ('check_in_to', listings.fields.HourField(blank=True, default='', max_length=5)),
                ('check_out_until', listings.fields.HourField(blank=True, default='', max_length=5)),
                ('place', models.CharField(blank=True, default='', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Coordinates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('longitude', models.DecimalField(decimal_places=12, max_digits=15)),
                ('latitude', models.DecimalField(decimal_places=12, max_digits=15)),
            ],
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('value', models.DecimalField(decimal_places=2, max_digits=8)),
                ('discount_type', models.SmallIntegerField(choices=[(1, 'Early Bird'), (2, 'Late Bird')])),
                ('optional', models.BooleanField(default=False)),
                ('days_before', models.SmallIntegerField()),
                ('is_percentage', models.BooleanField(default=False)),
                ('calculation_method', models.CharField(blank=True, choices=[('DA', 'Daily'), ('PS', 'Per Stay'), ('PD', 'Per Person Per Day'), ('3P', 'Per Person Per Stay'), ('PP', 'Per Stay Percent'), ('OR', 'Per Stay Only Rates Percent'), ('NT', 'Per Stay No Taxes Percent')], default='PS', max_length=2)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('override', models.CharField(default='', max_length=200)),
                ('display', models.BooleanField(default=False)),
                ('value', models.IntegerField(blank=True, default=1)),
                ('category', models.IntegerField(choices=[(0, 'No Category'), (1, 'Safety'), (2, 'Rules'), (3, 'Amenity Kitchen'), (4, 'Amenity'), (5, 'Activities'), (6, 'Views'), (7, 'Access'), (8, 'Area')], default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('payment_schedule', models.SmallIntegerField(blank=True, choices=[(0, 'at booking'), (1, 'at check in'), (101, 'days before 1'), (107, 'days before 7'), (114, 'days before 14'), (160, 'days before 60'), (190, 'days before 90')], default=None, null=True)),
                ('payment_template', models.SmallIntegerField(blank=True, choices=[(1, 'payment 100'), (2, 'payment 50 50'), (3, 'payment 33 33 34')], default=None, null=True)),
                ('payment_custom_date', models.DateTimeField(blank=True, default=None, null=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, default='')),
                ('cancellation_policy', models.CharField(blank=True, choices=[('EA', 'Full'), ('OK', 'Relaxed'), ('FA', 'Flexible'), ('RI', 'Moderate'), ('FI', 'Firm'), ('ST', 'Strict'), ('SS', 'Super Strict'), ('LT', 'Long Term'), ('NR', 'No Refunds'), ('UN', 'Unknown')], default='UN', max_length=2)),
                ('external_id', models.CharField(default='', editable=False, max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HouseRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('url', models.ImageField(max_length=500, upload_to=cozmo.storages.UploadImageTo('properties/images'))),
                ('thumbnail', models.ImageField(max_length=500, null=True, upload_to=cozmo.storages.UploadImageTo('properties/images/thumbnail'))),
                ('caption', models.TextField(blank=True, default='')),
                ('order', models.PositiveSmallIntegerField(blank=True, default=1000, validators=[django.core.validators.MaxValueValidator(1000)])),
                ('external_id', models.CharField(blank=True, default='', max_length=100, null=True)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ListingDescriptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, default='', max_length=100)),
                ('headline', models.CharField(blank=True, default='', max_length=150)),
                ('summary', models.TextField(blank=True, default='')),
                ('space', models.TextField(blank=True, default='')),
                ('access', models.TextField(blank=True, default='')),
                ('interaction', models.TextField(blank=True, default='')),
                ('neighborhood', models.TextField(blank=True, default='')),
                ('transit', models.TextField(blank=True, default='')),
                ('notes', models.TextField(blank=True, default='')),
                ('house_rules', models.TextField(blank=True, default='')),
                ('description', models.TextField(blank=True, default='')),
                ('additional_amenities', models.TextField(blank=True, default='')),
                ('things_to_do', models.TextField(blank=True, default='')),
                ('house_manual', models.TextField(blank=True, default='')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('continent', models.CharField(blank=True, default='', max_length=35)),
                ('country', models.CharField(blank=True, default='', max_length=100)),
                ('country_code', models.CharField(blank=True, choices=[('AD', 'AD'), ('AE', 'AE'), ('AF', 'AF'), ('AG', 'AG'), ('AI', 'AI'), ('AL', 'AL'), ('AM', 'AM'), ('AO', 'AO'), ('AQ', 'AQ'), ('AR', 'AR'), ('AS', 'AS'), ('AT', 'AT'), ('AU', 'AU'), ('AW', 'AW'), ('AX', 'AX'), ('AZ', 'AZ'), ('BA', 'BA'), ('BB', 'BB'), ('BD', 'BD'), ('BE', 'BE'), ('BF', 'BF'), ('BG', 'BG'), ('BH', 'BH'), ('BI', 'BI'), ('BJ', 'BJ'), ('BL', 'BL'), ('BM', 'BM'), ('BN', 'BN'), ('BO', 'BO'), ('BQ', 'BQ'), ('BR', 'BR'), ('BS', 'BS'), ('BT', 'BT'), ('BV', 'BV'), ('BW', 'BW'), ('BY', 'BY'), ('BZ', 'BZ'), ('CA', 'CA'), ('CC', 'CC'), ('CD', 'CD'), ('CF', 'CF'), ('CG', 'CG'), ('CH', 'CH'), ('CI', 'CI'), ('CK', 'CK'), ('CL', 'CL'), ('CM', 'CM'), ('CN', 'CN'), ('CO', 'CO'), ('CR', 'CR'), ('CU', 'CU'), ('CV', 'CV'), ('CW', 'CW'), ('CX', 'CX'), ('CY', 'CY'), ('CZ', 'CZ'), ('DE', 'DE'), ('DJ', 'DJ'), ('DK', 'DK'), ('DM', 'DM'), ('DO', 'DO'), ('DZ', 'DZ'), ('EC', 'EC'), ('EE', 'EE'), ('EG', 'EG'), ('EH', 'EH'), ('ER', 'ER'), ('ES', 'ES'), ('ET', 'ET'), ('FI', 'FI'), ('FJ', 'FJ'), ('FK', 'FK'), ('FM', 'FM'), ('FO', 'FO'), ('FR', 'FR'), ('GA', 'GA'), ('GB', 'GB'), ('GD', 'GD'), ('GE', 'GE'), ('GF', 'GF'), ('GG', 'GG'), ('GH', 'GH'), ('GI', 'GI'), ('GL', 'GL'), ('GM', 'GM'), ('GN', 'GN'), ('GP', 'GP'), ('GQ', 'GQ'), ('GR', 'GR'), ('GS', 'GS'), ('GT', 'GT'), ('GU', 'GU'), ('GW', 'GW'), ('GY', 'GY'), ('HK', 'HK'), ('HM', 'HM'), ('HN', 'HN'), ('HR', 'HR'), ('HT', 'HT'), ('HU', 'HU'), ('ID', 'ID'), ('IE', 'IE'), ('IL', 'IL'), ('IM', 'IM'), ('IN', 'IN'), ('IO', 'IO'), ('IQ', 'IQ'), ('IR', 'IR'), ('IS', 'IS'), ('IT', 'IT'), ('JE', 'JE'), ('JM', 'JM'), ('JO', 'JO'), ('JP', 'JP'), ('KE', 'KE'), ('KG', 'KG'), ('KH', 'KH'), ('KI', 'KI'), ('KM', 'KM'), ('KN', 'KN'), ('KP', 'KP'), ('KR', 'KR'), ('KW', 'KW'), ('KY', 'KY'), ('KZ', 'KZ'), ('LA', 'LA'), ('LB', 'LB'), ('LC', 'LC'), ('LI', 'LI'), ('LK', 'LK'), ('LR', 'LR'), ('LS', 'LS'), ('LT', 'LT'), ('LU', 'LU'), ('LV', 'LV'), ('LY', 'LY'), ('MA', 'MA'), ('MC', 'MC'), ('MD', 'MD'), ('ME', 'ME'), ('MF', 'MF'), ('MG', 'MG'), ('MH', 'MH'), ('MK', 'MK'), ('ML', 'ML'), ('MM', 'MM'), ('MN', 'MN'), ('MO', 'MO'), ('MP', 'MP'), ('MQ', 'MQ'), ('MR', 'MR'), ('MS', 'MS'), ('MT', 'MT'), ('MU', 'MU'), ('MV', 'MV'), ('MW', 'MW'), ('MX', 'MX'), ('MY', 'MY'), ('MZ', 'MZ'), ('NA', 'NA'), ('NC', 'NC'), ('NE', 'NE'), ('NF', 'NF'), ('NG', 'NG'), ('NI', 'NI'), ('NL', 'NL'), ('NO', 'NO'), ('NP', 'NP'), ('NR', 'NR'), ('NU', 'NU'), ('NZ', 'NZ'), ('OM', 'OM'), ('PA', 'PA'), ('PE', 'PE'), ('PF', 'PF'), ('PG', 'PG'), ('PH', 'PH'), ('PK', 'PK'), ('PL', 'PL'), ('PM', 'PM'), ('PN', 'PN'), ('PR', 'PR'), ('PS', 'PS'), ('PT', 'PT'), ('PW', 'PW'), ('PY', 'PY'), ('QA', 'QA'), ('RE', 'RE'), ('RO', 'RO'), ('RS', 'RS'), ('RU', 'RU'), ('RW', 'RW'), ('SA', 'SA'), ('SB', 'SB'), ('SC', 'SC'), ('SD', 'SD'), ('SE', 'SE'), ('SG', 'SG'), ('SH', 'SH'), ('SI', 'SI'), ('SJ', 'SJ'), ('SK', 'SK'), ('SL', 'SL'), ('SM', 'SM'), ('SN', 'SN'), ('SO', 'SO'), ('SR', 'SR'), ('SS', 'SS'), ('ST', 'ST'), ('SV', 'SV'), ('SX', 'SX'), ('SY', 'SY'), ('SZ', 'SZ'), ('TC', 'TC'), ('TD', 'TD'), ('TF', 'TF'), ('TG', 'TG'), ('TH', 'TH'), ('TJ', 'TJ'), ('TK', 'TK'), ('TL', 'TL'), ('TM', 'TM'), ('TN', 'TN'), ('TO', 'TO'), ('TR', 'TR'), ('TT', 'TT'), ('TV', 'TV'), ('TW', 'TW'), ('TZ', 'TZ'), ('UA', 'UA'), ('UG', 'UG'), ('UM', 'UM'), ('US', 'US'), ('UY', 'UY'), ('UZ', 'UZ'), ('VA', 'VA'), ('VC', 'VC'), ('VE', 'VE'), ('VG', 'VG'), ('VI', 'VI'), ('VN', 'VN'), ('VU', 'VU'), ('WF', 'WF'), ('WS', 'WS'), ('XK', 'XK'), ('YE', 'YE'), ('YT', 'YT'), ('ZA', 'ZA'), ('ZM', 'ZM'), ('ZW', 'ZW')], default='', max_length=2)),
                ('region', models.CharField(blank=True, default='', max_length=100)),
                ('state', models.CharField(blank=True, default='', max_length=100)),
                ('city', models.CharField(blank=True, default='', max_length=100)),
                ('address', models.CharField(blank=True, default='', max_length=150)),
                ('apartment', models.CharField(blank=True, default='', max_length=150)),
                ('postal_code', models.CharField(blank=True, default='', max_length=8)),
                ('longitude', models.DecimalField(blank=True, decimal_places=12, max_digits=15, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=12, max_digits=15, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=20)),
                ('last_name', models.CharField(blank=True, max_length=40)),
                ('company_name', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', cozmo_common.db.fields.PhoneField(blank=True, max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PointOfInterest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('category', models.CharField(default='', max_length=200)),
                ('description', models.TextField(blank=True, default='')),
                ('address', models.TextField(blank=True, default='')),
                ('image', models.ImageField(blank=True, null=True, upload_to=cozmo.storages.UploadImageTo('pois'))),
                ('url', models.URLField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PricingSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('currency', models.CharField(choices=[('AFN', 'AFN'), ('DZD', 'DZD'), ('ARS', 'ARS'), ('AMD', 'AMD'), ('AWG', 'AWG'), ('AUD', 'AUD'), ('AZN', 'AZN'), ('BSD', 'BSD'), ('BHD', 'BHD'), ('THB', 'THB'), ('PAB', 'PAB'), ('BBD', 'BBD'), ('BYN', 'BYN'), ('BZD', 'BZD'), ('BMD', 'BMD'), ('BOB', 'BOB'), ('VEF', 'VEF'), ('BRL', 'BRL'), ('BND', 'BND'), ('BGN', 'BGN'), ('BIF', 'BIF'), ('CVE', 'CVE'), ('CAD', 'CAD'), ('KYD', 'KYD'), ('CLP', 'CLP'), ('COP', 'COP'), ('KMF', 'KMF'), ('CDF', 'CDF'), ('BAM', 'BAM'), ('NIO', 'NIO'), ('CRC', 'CRC'), ('CUP', 'CUP'), ('CZK', 'CZK'), ('GMD', 'GMD'), ('DKK', 'DKK'), ('MKD', 'MKD'), ('DJF', 'DJF'), ('STN', 'STN'), ('DOP', 'DOP'), ('VND', 'VND'), ('XCD', 'XCD'), ('EGP', 'EGP'), ('SVC', 'SVC'), ('ETB', 'ETB'), ('EUR', 'EUR'), ('FKP', 'FKP'), ('FJD', 'FJD'), ('HUF', 'HUF'), ('GHS', 'GHS'), ('GIP', 'GIP'), ('HTG', 'HTG'), ('PYG', 'PYG'), ('GNF', 'GNF'), ('GYD', 'GYD'), ('HKD', 'HKD'), ('UAH', 'UAH'), ('ISK', 'ISK'), ('INR', 'INR'), ('IRR', 'IRR'), ('IQD', 'IQD'), ('JMD', 'JMD'), ('JOD', 'JOD'), ('KES', 'KES'), ('PGK', 'PGK'), ('HRK', 'HRK'), ('KWD', 'KWD'), ('AOA', 'AOA'), ('MMK', 'MMK'), ('LAK', 'LAK'), ('GEL', 'GEL'), ('LBP', 'LBP'), ('ALL', 'ALL'), ('HNL', 'HNL'), ('SLL', 'SLL'), ('LRD', 'LRD'), ('LYD', 'LYD'), ('SZL', 'SZL'), ('LSL', 'LSL'), ('MGA', 'MGA'), ('MWK', 'MWK'), ('MYR', 'MYR'), ('MUR', 'MUR'), ('MXN', 'MXN'), ('MDL', 'MDL'), ('MAD', 'MAD'), ('MZN', 'MZN'), ('BOV', 'BOV'), ('NGN', 'NGN'), ('ERN', 'ERN'), ('NAD', 'NAD'), ('NPR', 'NPR'), ('ANG', 'ANG'), ('ILS', 'ILS'), ('TWD', 'TWD'), ('NZD', 'NZD'), ('BTN', 'BTN'), ('KPW', 'KPW'), ('NOK', 'NOK'), ('MRU', 'MRU'), ('PKR', 'PKR'), ('MOP', 'MOP'), ('TOP', 'TOP'), ('CUC', 'CUC'), ('UYU', 'UYU'), ('PHP', 'PHP'), ('GBP', 'GBP'), ('BWP', 'BWP'), ('QAR', 'QAR'), ('GTQ', 'GTQ'), ('ZAR', 'ZAR'), ('OMR', 'OMR'), ('KHR', 'KHR'), ('RON', 'RON'), ('MVR', 'MVR'), ('IDR', 'IDR'), ('RUB', 'RUB'), ('RWF', 'RWF'), ('SHP', 'SHP'), ('SAR', 'SAR'), ('RSD', 'RSD'), ('SCR', 'SCR'), ('SGD', 'SGD'), ('PEN', 'PEN'), ('SBD', 'SBD'), ('KGS', 'KGS'), ('SOS', 'SOS'), ('TJS', 'TJS'), ('SSP', 'SSP'), ('LKR', 'LKR'), ('XSU', 'XSU'), ('SDG', 'SDG'), ('SRD', 'SRD'), ('SEK', 'SEK'), ('CHF', 'CHF'), ('SYP', 'SYP'), ('BDT', 'BDT'), ('WST', 'WST'), ('TZS', 'TZS'), ('KZT', 'KZT'), ('TTD', 'TTD'), ('MNT', 'MNT'), ('TND', 'TND'), ('TRY', 'TRY'), ('TMT', 'TMT'), ('AED', 'AED'), ('USD', 'USD'), ('UGX', 'UGX'), ('CLF', 'CLF'), ('COU', 'COU'), ('UZS', 'UZS'), ('VUV', 'VUV'), ('KRW', 'KRW'), ('YER', 'YER'), ('JPY', 'JPY'), ('CNY', 'CNY'), ('ZMW', 'ZMW'), ('ZWL', 'ZWL'), ('PLN', 'PLN')], default='USD', max_length=3)),
                ('nightly', models.DecimalField(decimal_places=2, max_digits=9)),
                ('weekend', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('cleaning_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('extra_person_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('security_deposit', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('included_guests', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('payment_schedule', models.SmallIntegerField(blank=True, choices=[(0, 'at booking'), (1, 'at check in'), (101, 'days before 1'), (107, 'days before 7'), (114, 'days before 14'), (160, 'days before 60'), (190, 'days before 90')], default=None, null=True)),
                ('payment_template', models.SmallIntegerField(blank=True, choices=[(1, 'payment 100'), (2, 'payment 50 50'), (3, 'payment 33 33 34')], default=None, null=True)),
                ('payment_custom_date', models.DateTimeField(blank=True, default=None, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Active'), (2, 'Archived'), (3, 'Draft'), (4, 'Disabled'), (5, 'Removed')], default=1)),
                ('floor', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default='', max_length=150)),
                ('locale', models.CharField(blank=True, max_length=2)),
                ('time_zone', models.CharField(blank=True, max_length=50)),
                ('property_type', models.CharField(choices=[('AH', 'Aparthotel'), ('AP', 'Apartment'), ('BA', 'Barn'), ('BB', 'Bed and Breakfast'), ('BH', 'Beach Hut'), ('BO', 'Boat'), ('BP', 'Boutique Hotel'), ('BU', 'Bungalow'), ('CA', 'Cabin'), ('CR', 'Camper/RV'), ('CP', 'Campsite'), ('CM', 'Caravan/Mobile Home'), ('CN', 'Casa Particular'), ('CS', 'Castle'), ('CV', 'Cave'), ('CH', 'Chalet'), ('CU', 'Chateau'), ('CO', 'Condo'), ('CC', 'Converted Chapel'), ('CT', 'Cottage'), ('CY', 'Cycladic House'), ('DA', 'Dammuso'), ('DH', 'Dome House'), ('DR', 'Dorm'), ('EH', 'Earth House'), ('ES', 'Estate'), ('FA', 'Farmhouse'), ('FI', 'Finca'), ('FO', 'Fort'), ('GI', 'Gite'), ('GS', 'Guest Suite'), ('GH', 'Guesthouse'), ('HH', 'Heritage Hotel'), ('HS', 'Hostel'), ('HT', 'Hotel'), ('HO', 'House'), ('HB', 'Houseboat'), ('HU', 'Hut'), ('IG', 'Igloo'), ('IL', 'In Law'), ('IN', 'Inn'), ('IS', 'Island'), ('LH', 'Light House'), ('LD', 'Lodge'), ('LO', 'Loft'), ('MH', 'Manor House'), ('MI', 'Minsu'), ('MB', 'Mobile Home'), ('NB', 'Narrow Boat'), ('OT', 'Other'), ('PE', 'Pension'), ('PH', 'Pent House'), ('PL', 'Plane'), ('RE', 'Resort'), ('RO', 'Room'), ('RI', 'Riad'), ('RY', 'Ryokan'), ('SA', 'Serviced Apartment'), ('SI', 'Ski-in/Ski-out'), ('ST', 'Studio'), ('SH', 'Shepherds Hut'), ('SC', 'Ski Chalet'), ('TC', 'Tented Camp'), ('TE', 'Tent'), ('TF', 'Tiny House'), ('TI', 'Tipi'), ('TW', 'Tower'), ('TH', 'Townhouse'), ('TR', 'Train'), ('TO', 'Treehouse'), ('TU', 'Trullo'), ('VH', 'Vacation Home'), ('VI', 'Villa'), ('WA', 'Watermill'), ('WI', 'Windmill'), ('YA', 'Yacht'), ('YU', 'Yurt')], max_length=2)),
                ('rental_type', models.CharField(choices=[('RE', 'Entire Home'), ('OT', 'Other'), ('RP', 'Private'), ('RS', 'Shared')], default='OT', max_length=2)),
                ('max_guests', models.IntegerField(blank=True, null=True)),
                ('external_id', models.CharField(blank=True, default='', max_length=255)),
                ('legacy_id', models.CharField(blank=True, default='', editable=False, max_length=255)),
                ('license_number', models.CharField(blank=True, max_length=50)),
                ('bedrooms', models.DecimalField(blank=True, decimal_places=1, default=0.0, max_digits=6)),
                ('bathrooms', models.DecimalField(blank=True, decimal_places=1, default=0.0, max_digits=6)),
                ('inventory_count', models.PositiveSmallIntegerField(blank=True, default=1)),
                ('is_sandbox', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'properties',
                'permissions': (('public_api_access', 'Can access data in Public API'),),
            },
            managers=[
                ('default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Rate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('currency', models.CharField(choices=[('AFN', 'AFN'), ('DZD', 'DZD'), ('ARS', 'ARS'), ('AMD', 'AMD'), ('AWG', 'AWG'), ('AUD', 'AUD'), ('AZN', 'AZN'), ('BSD', 'BSD'), ('BHD', 'BHD'), ('THB', 'THB'), ('PAB', 'PAB'), ('BBD', 'BBD'), ('BYN', 'BYN'), ('BZD', 'BZD'), ('BMD', 'BMD'), ('BOB', 'BOB'), ('VEF', 'VEF'), ('BRL', 'BRL'), ('BND', 'BND'), ('BGN', 'BGN'), ('BIF', 'BIF'), ('CVE', 'CVE'), ('CAD', 'CAD'), ('KYD', 'KYD'), ('CLP', 'CLP'), ('COP', 'COP'), ('KMF', 'KMF'), ('CDF', 'CDF'), ('BAM', 'BAM'), ('NIO', 'NIO'), ('CRC', 'CRC'), ('CUP', 'CUP'), ('CZK', 'CZK'), ('GMD', 'GMD'), ('DKK', 'DKK'), ('MKD', 'MKD'), ('DJF', 'DJF'), ('STN', 'STN'), ('DOP', 'DOP'), ('VND', 'VND'), ('XCD', 'XCD'), ('EGP', 'EGP'), ('SVC', 'SVC'), ('ETB', 'ETB'), ('EUR', 'EUR'), ('FKP', 'FKP'), ('FJD', 'FJD'), ('HUF', 'HUF'), ('GHS', 'GHS'), ('GIP', 'GIP'), ('HTG', 'HTG'), ('PYG', 'PYG'), ('GNF', 'GNF'), ('GYD', 'GYD'), ('HKD', 'HKD'), ('UAH', 'UAH'), ('ISK', 'ISK'), ('INR', 'INR'), ('IRR', 'IRR'), ('IQD', 'IQD'), ('JMD', 'JMD'), ('JOD', 'JOD'), ('KES', 'KES'), ('PGK', 'PGK'), ('HRK', 'HRK'), ('KWD', 'KWD'), ('AOA', 'AOA'), ('MMK', 'MMK'), ('LAK', 'LAK'), ('GEL', 'GEL'), ('LBP', 'LBP'), ('ALL', 'ALL'), ('HNL', 'HNL'), ('SLL', 'SLL'), ('LRD', 'LRD'), ('LYD', 'LYD'), ('SZL', 'SZL'), ('LSL', 'LSL'), ('MGA', 'MGA'), ('MWK', 'MWK'), ('MYR', 'MYR'), ('MUR', 'MUR'), ('MXN', 'MXN'), ('MDL', 'MDL'), ('MAD', 'MAD'), ('MZN', 'MZN'), ('BOV', 'BOV'), ('NGN', 'NGN'), ('ERN', 'ERN'), ('NAD', 'NAD'), ('NPR', 'NPR'), ('ANG', 'ANG'), ('ILS', 'ILS'), ('TWD', 'TWD'), ('NZD', 'NZD'), ('BTN', 'BTN'), ('KPW', 'KPW'), ('NOK', 'NOK'), ('MRU', 'MRU'), ('PKR', 'PKR'), ('MOP', 'MOP'), ('TOP', 'TOP'), ('CUC', 'CUC'), ('UYU', 'UYU'), ('PHP', 'PHP'), ('GBP', 'GBP'), ('BWP', 'BWP'), ('QAR', 'QAR'), ('GTQ', 'GTQ'), ('ZAR', 'ZAR'), ('OMR', 'OMR'), ('KHR', 'KHR'), ('RON', 'RON'), ('MVR', 'MVR'), ('IDR', 'IDR'), ('RUB', 'RUB'), ('RWF', 'RWF'), ('SHP', 'SHP'), ('SAR', 'SAR'), ('RSD', 'RSD'), ('SCR', 'SCR'), ('SGD', 'SGD'), ('PEN', 'PEN'), ('SBD', 'SBD'), ('KGS', 'KGS'), ('SOS', 'SOS'), ('TJS', 'TJS'), ('SSP', 'SSP'), ('LKR', 'LKR'), ('XSU', 'XSU'), ('SDG', 'SDG'), ('SRD', 'SRD'), ('SEK', 'SEK'), ('CHF', 'CHF'), ('SYP', 'SYP'), ('BDT', 'BDT'), ('WST', 'WST'), ('TZS', 'TZS'), ('KZT', 'KZT'), ('TTD', 'TTD'), ('MNT', 'MNT'), ('TND', 'TND'), ('TRY', 'TRY'), ('TMT', 'TMT'), ('AED', 'AED'), ('USD', 'USD'), ('UGX', 'UGX'), ('CLF', 'CLF'), ('COU', 'COU'), ('UZS', 'UZS'), ('VUV', 'VUV'), ('KRW', 'KRW'), ('YER', 'YER'), ('JPY', 'JPY'), ('CNY', 'CNY'), ('ZMW', 'ZMW'), ('ZWL', 'ZWL'), ('PLN', 'PLN')], default='USD', max_length=3)),
                ('nightly', models.DecimalField(decimal_places=2, max_digits=9)),
                ('weekend', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('cleaning_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('extra_person_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('security_deposit', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('label', models.CharField(blank=True, default='', max_length=100)),
                ('seasonal', models.BooleanField(default=False)),
                ('weekly', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=9)),
                ('monthly', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=9)),
                ('time_frame', django.contrib.postgres.fields.ranges.DateRangeField()),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('payment_schedule', models.SmallIntegerField(blank=True, choices=[(0, 'at booking'), (1, 'at check in'), (101, 'days before 1'), (107, 'days before 7'), (114, 'days before 14'), (160, 'days before 60'), (190, 'days before 90')], default=None, null=True)),
                ('payment_template', models.SmallIntegerField(blank=True, choices=[(1, 'payment 100'), (2, 'payment 50 50'), (3, 'payment 33 33 34')], default=None, null=True)),
                ('payment_custom_date', models.DateTimeField(blank=True, default=None, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Accepted'), (2, 'Cancelled'), (3, 'Declined'), (4, 'Inquiry'), (5, 'Inquiry Blocked'), (6, 'Request')], default=1)),
                ('guests_adults', models.IntegerField(blank=True, default=0)),
                ('guests_children', models.IntegerField(blank=True, default=0)),
                ('guests_infants', models.IntegerField(blank=True, default=0)),
                ('pets', models.IntegerField(blank=True, default=0)),
                ('rebook_allowed_if_cancelled', models.BooleanField(default=True)),
                ('external_id', models.CharField(blank=True, default='', help_text='Reference ID to an external reservation', max_length=255)),
                ('connection_id', models.CharField(blank=True, default='', max_length=255)),
                ('confirmation_code', models.CharField(default=listings.models.generate_code, help_text='Friendly reservation identifier', max_length=255, unique=True)),
                ('expiration', models.DateTimeField(blank=True, null=True)),
                ('refund_deposit_after', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('cancellation_policy', models.CharField(blank=True, choices=[('EA', 'Full'), ('OK', 'Relaxed'), ('FA', 'Flexible'), ('RI', 'Moderate'), ('FI', 'Firm'), ('ST', 'Strict'), ('SS', 'Super Strict'), ('LT', 'Long Term'), ('NR', 'No Refunds'), ('UN', 'Unknown')], default='UN', max_length=2)),
                ('source', models.PositiveSmallIntegerField(choices=[(1, 'App'), (2, 'Web'), (3, 'Airbnb'), (4, 'VRBO'), (5, 'Booking'), (6, 'Tripadvisor')], default=1)),
                ('date_booked', models.DateTimeField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Total Price', max_digits=12)),
                ('paid', models.DecimalField(decimal_places=2, default=0.0, help_text='Total Paid By Guest', max_digits=12, null=True)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReservationDiscount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=8)),
                ('discount_type', models.SmallIntegerField(choices=[(1, 'Early Bird'), (2, 'Late Bird')])),
                ('optional', models.BooleanField(default=False)),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='listings.Reservation')),
            ],
        ),
        migrations.CreateModel(
            name='ReservationFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=200)),
                ('value', models.DecimalField(decimal_places=2, max_digits=8)),
                ('is_percentage', models.BooleanField(default=False)),
                ('optional', models.BooleanField(default=False)),
                ('taxable', models.BooleanField(default=False)),
                ('refundable', models.BooleanField(default=False)),
                ('fee_tax_type', models.CharField(choices=[('TLC', 'Local Tax'), ('TTR', 'Tourist Tax'), ('TVA', 'VAT'), ('THO', 'Hotel Tax'), ('TOT', 'Other Tax'), ('FEL', 'Electricity Fee'), ('FTW', 'Towel Fee'), ('FDP', 'Damage Protection Insurance Fee'), ('FBO', 'Booking Fee'), ('FSE', 'Service Fee'), ('FRE', 'Resort Fee'), ('FCO', 'Community Fee'), ('FLE', 'Linen Fee'), ('PFM', 'Platform Fee'), ('CLN', 'Cleaning Fee'), ('FOT', 'Other Fee'), ('FSD', 'Security Deposit')], default='FOT', max_length=3)),
                ('custom', models.BooleanField(default=False)),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='listings.Reservation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReservationNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('body', models.TextField(blank=True, default='')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='listings.Reservation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReservationRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.IntegerField(default=0)),
                ('value', models.DecimalField(decimal_places=2, max_digits=9)),
                ('reservation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='listings.Reservation')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, default='', max_length=200)),
                ('room_type', models.CharField(blank=True, choices=[('AT', 'Attic'), ('BM', 'Basement'), ('BA', 'Bathroom'), ('BE', 'Bedroom'), ('CM', 'Common'), ('KB', 'Kids Bedroom'), ('GB', 'Guest Bedroom'), ('LO', 'Loft'), ('MB', 'Master Bedroom'), ('OT', 'Other')], default='OT', max_length=2)),
                ('beds', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('KS', 'King'), ('QS', 'Queen'), ('DB', 'Double'), ('SS', 'Single'), ('SB', 'Sofa'), ('CO', 'Couch'), ('AM', 'Air Mattress'), ('BB', 'Bunk'), ('FM', 'Floor Mattress'), ('TB', 'Toddler'), ('CR', 'Crib'), ('WB', 'Water'), ('HA', 'Hammock'), ('OT', 'Other'), ('NB', 'No Bed')], max_length=2), blank=True, default=list, size=None)),
                ('bathrooms', models.IntegerField(blank=True, default=0)),
                ('features', models.ManyToManyField(blank=True, to='listings.Feature')),
                ('prop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='listings.Property')),
            ],
        ),
        migrations.CreateModel(
            name='SchedulingAssistant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('automatically_assign', models.BooleanField(default=False)),
                ('cleaning_from_time', models.TimeField(blank=True, null=True)),
                ('cleaning_to_time', models.TimeField(blank=True, null=True)),
                ('time_estimate', models.DurationField(blank=True, default=datetime.timedelta(0, 3600))),
                ('default_cost', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=9, null=True)),
                ('prop', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='scheduling_assistant', to='listings.Property')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Suitability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('elderly', models.CharField(choices=[('YES', 'Yes'), ('NO', 'No'), ('UN', 'Unknown'), ('Inq', 'Inquire')], default='UN', max_length=3)),
                ('pets', models.CharField(choices=[('YES', 'Yes'), ('NO', 'No'), ('UN', 'Unknown'), ('Inq', 'Inquire')], default='UN', max_length=3)),
                ('kids', models.CharField(choices=[('YES', 'Yes'), ('NO', 'No'), ('UN', 'Unknown'), ('Inq', 'Inquire')], default='UN', max_length=3)),
                ('large_groups', models.CharField(choices=[('YES', 'Yes'), ('NO', 'No'), ('UN', 'Unknown'), ('Inq', 'Inquire')], default='UN', max_length=3)),
                ('events', models.CharField(choices=[('YES', 'Yes'), ('NO', 'No'), ('UN', 'Unknown'), ('Inq', 'Inquire')], default='UN', max_length=3)),
                ('smoking', models.CharField(choices=[('YES', 'Yes'), ('NO', 'No'), ('UN', 'Unknown'), ('Inq', 'Inquire')], default='UN', max_length=3)),
                ('handicap', models.CharField(choices=[('YES', 'Yes'), ('NO', 'No'), ('UN', 'Unknown'), ('Inq', 'Inquire')], default='UN', max_length=3)),
                ('infants', models.CharField(choices=[('YES', 'Yes'), ('NO', 'No'), ('UN', 'Unknown'), ('Inq', 'Inquire')], default='UN', max_length=3)),
                ('children_not_allowed_details', models.TextField(blank=True, default='', null=True)),
                ('prop', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='suitability', to='listings.Property')),
            ],
        ),
        migrations.CreateModel(
            name='SyncLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Succes'), (2, 'Pending'), (3, 'Error')])),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('prop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_logs', to='listings.Property')),
            ],
        ),
        migrations.CreateModel(
            name='TurnDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('time_frame', django.contrib.postgres.fields.ranges.DateRangeField()),
                ('days', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')]), blank=True, default=list, size=None)),
                ('prop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='listings.Property')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('url', models.FileField(max_length=500, upload_to=cozmo.storages.UploadImageTo('properties/videos'), validators=[django.core.validators.FileExtensionValidator(['3gp', 'avi', 'mov', 'mp4', 'mkv', 'ogv', 'ogm', 'ogg', 'oga', 'webm'])])),
                ('caption', models.TextField(blank=True, default='')),
                ('external_id', models.CharField(blank=True, default='', max_length=255)),
                ('order', models.PositiveSmallIntegerField(blank=True, default=1000, validators=[django.core.validators.MaxValueValidator(1000)])),
                ('prop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='listings.Property')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
    ]
